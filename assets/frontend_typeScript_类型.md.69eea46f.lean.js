import{_ as l,o as p,c as o,d as s,a,b as n}from"./app.a2747a60.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"类型注解","slug":"类型注解","link":"#类型注解","children":[]},{"level":2,"title":"原始类型","slug":"原始类型","link":"#原始类型","children":[]},{"level":2,"title":"数组类型","slug":"数组类型","link":"#数组类型","children":[]},{"level":2,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":2,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[]},{"level":2,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":2,"title":"void 类型","slug":"void-类型","link":"#void-类型","children":[]}],"relativePath":"frontend/typeScript/类型.md"}'),e={name:"frontend/typeScript/类型.md"},t=a("",3),c=a("",4),r=a("",19),y=n("li",null,[s("在函数基础上 "),n("span",{style:{color:"#fe7c0b"}},"分别指定"),s(" 参数和返回值类型")],-1),D=n("li",null,[s("使用类型别名 "),n("span",{style:{color:"#fe7c0b"}},"同时指定"),s(" 参数和返回值类型")],-1),C=a("",12);function F(A,i,d,u,g,h){return p(),o("div",null,[t,s(" 错误演示： "),c,s(" TS 新增类型 "),r,s(" 两种写法： "),y,D,s(" 示例代码 1：分别指定 "),C])}const m=l(e,[["render",F]]);export{b as __pageData,m as default};
